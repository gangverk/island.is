---
description: Next.js Rendering Guidelines
globs: "**/*.{ts,tsx}"
alwaysApply: false
---

# Next.js Rendering Guidelines (Pages Router)

## Scope
This rule applies to all code using the **Next.js Pages Router** (not the App Router).

## Rendering Methods in Pages Router
- **Static Generation (SSG):** Use `getStaticProps` (and optionally `getStaticPaths`) for pages that can be pre-rendered at build time.
- **Server-side Rendering (SSR):** Use `getServerSideProps` for pages that need to fetch data on every request.
- **Client-side Rendering (CSR):** Use React hooks (`useEffect`, `useState`) for data that must be fetched on the client only.
- **Legacy:** `getInitialProps` is supported but should be avoided in new code in favor of `getStaticProps`/`getServerSideProps`.

## Best Practices
- Prefer SSG for performance and scalability when possible.
- Use SSR only when data must be up-to-date on every request.
- Use CSR for user-specific or highly dynamic data that does not need to be indexed by search engines.
- Do not use App Router features (e.g., Server Components, `app/` directory, or App Router-specific hooks).
- Reference: [Next.js Pages Router Rendering Docs](mdc:https:/nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props)

## Example: Static Generation
```js
// pages/posts/[id].js
export async function getStaticProps(context) {
  const { id } = context.params
  // fetch data
  return { props: { id } }
}

export async function getStaticPaths() {
  // fetch all ids
  return { paths: [{ params: { id: '1' } }], fallback: false }
}

export default function Post({ id }) {
  return <div>Post {id}</div>
}
```

## Example: Server-side Rendering
```js
// pages/profile.js
export async function getServerSideProps(context) {
  // fetch data
  return { props: { user: { name: 'Alice' } } }
}

export default function Profile({ user }) {
  return <div>Hello, {user.name}</div>
}
```

## Example: Client-side Rendering
```js
import { useEffect, useState } from 'react'

export default function Dashboard() {
  const [data, setData] = useState(null)
  useEffect(() => {
    fetch('/api/data').then(res => res.json()).then(setData)
  }, [])
  if (!data) return <div>Loading...</div>
  return <div>Data: {data.value}</div>
}
```

## Anti-Patterns
- Do not use App Router features (e.g., `app/` directory, Server Components, or App Router-specific hooks).
- Do not mix Pages Router and App Router patterns in the same project or file.

## Migration
- If migrating from App Router, refactor to use `pages/` directory and the data fetching methods above.

metadata:
  priority: high
  version: 1.0
  tags: ["nextjs", "rendering"]
</rule> 